name: actions

on:
  push:
    branches: 
       - main

env: 
  ECR_REPOSITORY: "hado-ecr"
  AWS_REGION: "us-east-1"

jobs:     
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Clone
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd app
        docker image build \
          --tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest \
          --tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG \
          .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition hado-app-task \
          --query taskDefinition > app/task-definition.json
  
    - name: Render Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: app/task-definition.json
        container-name: app
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: hado-service
        cluster: hado-cluster
        wait-for-service-stability: true
